import discord, { Message } from "discord.js";
import { weekday } from "../utils/commandbase.js";
import { form, yesno_buttons } from "./setdata.js";
import { ClassData, Subject } from "haosj";
import { getClass, updateData } from "../utils/commandbase.js";
import { loadJSONSync } from "../utils/data.js";
import { getSubjectByRaw } from "../utils/ufunction.js";
import { Config } from "../utils/config.js";

export const name = 'edit';
export const description = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
const noData = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
/**
 * edit <‡∏ß‡∏±‡∏ô> <‡∏Ñ‡∏≤‡∏ö>
 * @param {Message} message 
 * @param {string[]} args 
 */
export async function execute(message, args) {
    try {
        if (args.length != 2) { throw new Error(`${Config.getPrefix()}${name} <‡∏ß‡∏±‡∏ô> <‡∏Ñ‡∏≤‡∏ö>`) }
        let classData = getClass(message.guildId);
        let day = Number.parseInt(args[0]);
        let period = Number.parseInt(args[1]) - 1;
        let subject = classData.get(day)?.getSubject(period);
        if (subject == null) throw new Error("‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤.");
        if (period == -1 || period + 1 > classData.get(day).getSubjectList().length) throw new Error("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
        let newRawSubject;
        while (true) {
            newRawSubject = await createRawSubject(message, subject, 300000);
            let ns = getSubjectByRaw(newRawSubject);
            ns.setStartTime(subject.getStartTime());
            /**
             * @type {{name:string,value:string}[]}
             */
            let change = [];
            /**
             * @param {string | null} s 
             */
            let g = (s) => s == '' || s == null ? noData : s;
            /**
             * @typedef {"getName"|"getLocaleId"|"getLocaleTime"|"getLocaleRoomId"|"getLocaleTeacherName"|"getClassroomUrl"|"getMeetUrl"} SubjectMethod
             * @param {Subject} s1 
             * @param {Subject} s2 
             * @param {string} name
             * @param {SubjectMethod} methodName
             */
            let f = (name, methodName) => {
                if (subject[methodName]() != ns[methodName]()) change.push({ name, value: `${g(subject[methodName]())} >>> ${g(ns[methodName]())}` });
            };
            /**
             * @type {{name:string,method:SubjectMethod}[]}
             */
            let f_temp = [
                { name: "‡∏ä‡∏∑‡πà‡∏≠", method: "getName" },
                { name: "‡∏£‡∏´‡∏±‡∏™", method: "getLocaleId" },
                { name: "‡πÄ‡∏ß‡∏•‡∏≤", method: "getLocaleTime" },
                { name: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", method: "getLocaleRoomId" },
                { name: "‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô", method: "getLocaleTeacherName" },
                { name: "class room", method: "getClassroomUrl" },
                { name: "meet", method: "getMeetUrl" },
            ];
            f_temp.forEach((t) => f(t.name, t.method));
            await message.channel.send({
                embeds: [new discord.MessageEmbed().setTitle(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô${weekday[day]}‡∏Ñ‡∏≤‡∏ö ${period + 1} ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`).setFields(
                    change.map((t) => { return { name: t.name, value: t.value, inline: false } })
                ).setColor(Config.getColor()).setTimestamp()]
            });
            if (await yesno_buttons(message, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', 120000, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', '‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')) break;
        }

        /**
        * @type {import("haosj").RawClassData}
        */
        let hdata = loadJSONSync(`./datas/${message.guildId}.json`);
        hdata.subjectList[`_${day}`].subjectList[period] = newRawSubject;
        updateData(message.guildId, hdata);
        await message.channel.send({ content: '‚≠ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
    } catch (e) {
        return await message.channel.send({ content: "üõë‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô : " + e.message });
    }
}

/**
 * @param {Message} message
 * @param {Subject} subject
 * @param {ClassData} classData
 */
async function createRawSubject(message, subject, time = 300000) {
    /**
     * @param {string} content 
     * @returns {undefined | string}
     */
    let g = (content) => ['null', 'undefine', 'undefined'].includes(content.toLowerCase()) ? undefined : content;
    /**
     * @type {discord.MessageSelectOptionData[]}
     */
    let options = [
        { label: '‡∏ä‡∏∑‡πà‡∏≠', value: 'name', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ (${subject.getName() ?? noData})` },
        { label: '‡∏£‡∏´‡∏±‡∏™', value: 'id', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ (${subject.getId() ?? noData})` },
        { label: '‡πÄ‡∏ß‡∏•‡∏≤', value: 'time', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤ (${subject.getLocaleTime()})` },
        { label: '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', value: 'room', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (${subject.getRoomId() ?? noData})` },
        { label: '‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô', value: 'teacher', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô (${subject.getTeacher()?.join() ?? noData})` },
        { label: 'classroom', value: 'classroom', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç classroom url (${subject.getClassroomUrl() ?? noData})` },
        { label: 'meet', value: 'meet', emoji: '‚öô', description: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç meet url (${subject.getMeetUrl() ?? noData})` },
        { label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', value: 'cancel', description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ä‡∏≤', emoji: 'üõë' }
    ];
    let menus = new discord.MessageSelectMenu()
        .setCustomId('hao_edit_subject')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
        .setOptions(options)
        .setMaxValues(options.length);
    let actionRow = new discord.MessageActionRow().setComponents([menus]);
    let sended_message = await message.channel.send({ content: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£', components: [actionRow] });
    let interaction;
    try {
        interaction = await message.channel.awaitMessageComponent({ componentType: 'SELECT_MENU', time });
        if (interaction.customId != menus.customId) throw new Error("CUSTOM ID ERROR");
    } finally {
        await sended_message.delete();
    }
    let value = interaction.values;
    /**
     * @type {import("haosj").RawSubject}
     */
    let new_subject = {
        name: subject.getName(),
        classroom: subject.getClassroomUrl(),
        id: subject.getId(),
        meet: subject.getMeetUrl(),
        roomId: subject.getRoomId(),
        teacher: subject.getTeacher(),
        width: subject.getWidth()
    };
    if (value.includes(options[7].value)) throw new Error('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    if (value.includes(options[0].value)) new_subject.name = await form(message, '‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)', undefined, time);
    if (value.includes(options[1].value)) new_subject.id = await form(message, '‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)', g, time);
    if (value.includes(options[2].value)) new_subject.width = await form(message, '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà', (content) => {
        let number = Number.parseInt(content);
        if (Number.isNaN(number)) throw new Error(tsdo.errors.not_a_number);
        if (number < 0) throw new Error(tsdo.errors.negative_time);
        return number;
    }, time);
    if (value.includes(options[3].value)) new_subject.roomId = await form(message, '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)', g, time);
    if (value.includes(options[4].value)) new_subject.teacher = await form(message, '‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)', (content) => g(content)?.split(',').map((t) => t.trim()), time);
    if (value.includes(options[5].value)) new_subject.classroom = await form(message, 'classroom url ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)', g, time);
    if (value.includes(options[6].value)) new_subject.meet = await form(message, 'meet url ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)', g, time);
    return new_subject;
}