import { Message, MessageEmbed } from 'discord.js';
import { client } from '../main.js';
import { Config } from '../utils/config.js';
import { serversConfig } from '../utils/serversconfig.js';
import { toggleinterval } from './commands.js';

export const name = 'intervals';
export const description = '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥';

/**
 * 
 * @param {Message} message 
 * @param {string[]} args 
 */
export async function execute(message, args) {
    args = args.map((v) => v.toLowerCase());
    let command = args.shift();
    if (!serversConfig.isExist(message.guildId)) serversConfig.create(message.guildId);
    try {
        let out;
        let sc = serversConfig.get(message.guildId);
        switch (command) {
            case "add":
                if (!message.guild.channels.cache.has(args[0])) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏ü‡∏ô‡∏µ‡πâ. : ${args[0]}`);
                if (!message.guild.channels.cache.get(args[0]).isText()) throw new Error(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ. : ${message.guild.channels.cache.get(args[0]).toString()}`);
                if (sc.config.Settings.Interval.ChannelId.includes(args[0])) throw new Error(`‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß. : ${message.guild.channels.cache.get(args[0]).toString()}`);
                sc.addChannelId(args[0]);
                sc.manageInterval(false);
                out = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á${message.guild.channels.cache.get(args[0]).toString()}‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß.`;
                break;
            case "remove":
                if (!sc.config.Settings.Interval.ChannelId.includes(args[0])) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤");
                sc.removeChannelId(args[0]);
                sc.manageInterval(false);
                out = `‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á${message.guild.channels.cache.get(args[0]).toString()}‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß.`;
                break;
            case "before":
                let input = Number.parseInt(args[0]);
                if (Number.isNaN(input)) throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç : " + args[0]);
                sc.setAlert(input);
                sc.manageInterval(false);
                out = `‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${args[0]} ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß.`;
                break;
            case "toggle":
                toggleinterval.execute(message, args);
                sc.manageInterval(false);
                break;
            case "get":
                message.channel.send({
                    embeds: [
                        new MessageEmbed()
                            .setColor(Config.getColor())
                            .setTitle("üêáInterval Settingüêá")
                            .addField("‚öô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‚öô", sc.config.Settings.Interval.Enable.toString(), true)
                            .addField("‚åö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‚åö", sc.config.Settings.Interval.AlertBefore.toString() + " ‡∏ô‡∏≤‡∏ó‡∏µ")
                            .addField("‚öô‡∏´‡πâ‡∏≠‡∏á‚öô", (!Array.isArray(sc.config.Settings.Interval.ChannelId) || !sc.config.Settings.Interval.ChannelId.length) ? "‡πÑ‡∏°‡πà‡∏°‡∏µ" : sc.config.Settings.Interval.ChannelId.map((v) => client.channels.cache.get(v)).toLocaleString())
                    ]
                });
                break;
            case "reset":
                sc.resetInterval();
                sc.manageInterval(false);
                out = "Reset ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intervals ‡πÅ‡∏•‡πâ‡∏ß";
                break;
            default:
                throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á.");
        }
        if (out) message.channel.send({ content: "‚≠ï" + out });
    } catch (e) {
        message.channel.send({ content: "‚ùå" + e });
    }
}